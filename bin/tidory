#!/usr/bin/env node

const tidory = require('commander')

const wd = process.cwd()

const shelljs = require('shelljs')
const pkg = require('../package.json')
const path = require('path')
const webpack = require.resolve('webpack/bin/webpack')
const webpackDevServer = require.resolve('webpack-dev-server/bin/webpack-dev-server')
const TistorySkin = require('tistory-skin')

const webpackDevConfig = path.join(__dirname, '../config/webpack.dev.conf')
const webpackProdConfig = path.join(__dirname, '../config/webpack.prod.conf')

const configRequireCommands = ['start', 'preview', 'build', 'deploy', 'store']

if (configRequireCommands.includes(process.argv[2])) {
  var tidoryConfig = require('../tidory.config')
  var skin = new TistorySkin(tidoryConfig.url, tidoryConfig.ts_session)
  var dist = path.join(wd, tidoryConfig.path.build.dist)
}

tidory.version(pkg.version)

/**
 * Start development server
 *
 * -> tidory start
 */
tidory
  .command('start')
  .description('start development server by webpack-dev-server')
  .action(() => {
    shelljs.exec(`node ${webpackDevServer} --env.MODE=development --config ${webpackDevConfig}`)
  })

/**
 * Start preview server
 *
 * -> tidory preview
 */
tidory
  .command('preview')
  .description('start preview server by webpack-dev-server')
  .action(() => {
    shelljs.exec(`node ${webpackDevServer} --env.MODE=preview --config ${webpackDevConfig}`)
  })

/**
 * Build tidory project for production
 *
 * -> tidory build
 * -> tidory build --compress
 */
tidory
  .command('build')
  .description('build for distribution')
  .option('-c, --compress', 'compress distribution code')
  .action(cmd => {
    if (cmd.compress) {
      shelljs.exec(`node ${webpack} --env.MODE=build --config ${webpackProdConfig}`)
    } else {
      shelljs.exec(`node ${webpack} --env.MODE=production --config ${webpackProdConfig}`)
    }
  })

/**
 * Deploy tistory skin
 *
 * -> tidory deploy
 */
tidory
  .command('deploy')
  .description('deploy tistory skin')
  .action(async () => {
    await skin.clear()
    await skin.deploy(dist)
  })

/**
 * Store tistory skin on storage
 *
 * -> tidory store
 */
tidory
  .command('store')
  .description('store tistory skin on skin storage')
  .action(async () => {
    await skin.storage.clear()
    await skin.storage.store(dist, tidoryConfig.name)
  })

tidory.parse(process.argv)
