#!/usr/bin/env node

const tidory = require('commander')

const wd = process.cwd()

const shelljs = require('shelljs')
const pkg = require('../package.json')
const path = require('path')
const webpack = require.resolve('webpack/bin/webpack')
const webpackDevServer = require.resolve('webpack-dev-server/bin/webpack-dev-server')
const TistorySkin = require('tistory-skin')

const webpackDevConfig = path.join(__dirname, '../config/webpack.dev.conf')
const webpackProdConfig = path.join(__dirname, '../config/webpack.prod.conf')

const tidoryConfig = require('../tidory.config')
const skin = new TistorySkin(tidoryConfig.url, tidoryConfig.ts_session)
const dist = path.join(wd, tidoryConfig.path.dist)

tidory.version(pkg.version)

/**
 * -> tidory start
 */
tidory
  .command('start')
  .description('Start development server')
  .action(() => {
    shelljs.exec(`node ${webpackDevServer} --config ${webpackDevConfig} --env.development`)
  })

/**
 * -> tidory preview
 */
tidory
  .command('preview')
  .description('Start preview server')
  .action(() => {
    shelljs.exec(`node ${webpackDevServer} --config ${webpackDevConfig} --env.preview`)
  })

/**
 * -> tidory build
 */
tidory
  .command('build')
  .description('Build tidory project')
  .action(() => {
    shelljs.exec(`node ${webpack} --config ${webpackProdConfig} --env.build`)
  })

/**
 * -> tidory production
 */
tidory
  .command('production')
  .description('Build tidory project for production')
  .action(() => {
    shelljs.exec(`node ${webpack} --config ${webpackProdConfig} --env.production`)
  })

/**
 * -> tidory deploy
 */
tidory
  .command('deploy')
  .description('Deploy tistory skin')
  .action(async () => {
    await skin.clear()
    await skin.deploy(dist)
  })

/**
 * -> tidory store
 */
tidory
  .command('store')
  .description('Store tistory skin on skin storage')
  .action(async () => {
    await skin.storage.clear()
    await skin.storage.store(dist, tidoryConfig.skinname)
  })

tidory.parse(process.argv)
