#!/usr/bin/env node

const tidory = require('commander');

const shelljs = require('shelljs')
const ora = require('ora')
const colors = require('colors')
const download = require('download-git-repo')
const pkg = require('../package.json')
const path = require('path')
const webpack = path.join(__dirname, '../node_modules/webpack/bin/webpack.js');
const webpackDevServer = path.join(__dirname, '../node_modules/webpack-dev-server/bin/webpack-dev-server.js');

tidory
  .version(pkg.version)
tidory
  .command('new <project_name>')
  .description('download project template from git')
  .action(function(project_name) {
    console.log('\n\0\0Thank you for using Tidory\n'.yellow.bold);
    const spinner = ora('Trying to copy template from git...\n');
    spinner.start();

    download('github:pronist/tidory-starter-template', path.join(process.cwd(), project_name), false, function(err) {
      if(err) {
        spinner.stopAndPersist({ text:`${stderr}\n`.red.bold });
      }
      else {
        spinner.stopAndPersist({ text:`Successful\n`.green.bold });
      }
    })
  });
tidory
  .command('start')
  .description('start development server by webpack-dev-server')
  .action(function() {
    const webpackDevConfig = path.join(__dirname, '../dev/webpack/webpack.dev.conf');
    shelljs.exec(`node ${webpackDevServer} --config ${webpackDevConfig}`);
  });
tidory
  .command('build')
  .description('build for distribution')
  .option("-c, --compress", 'compress distribution code')
  .action(function(cmd) {
    if(cmd.compress) {
      const webpackBuildConfig = path.join(__dirname, '../build/webpack/webpack.minify.conf');
      shelljs.exec(`node ${webpack} --config ${webpackBuildConfig}`);
    }
    else {
      const webpackProdConfig = path.join(__dirname, '../build/webpack/webpack.prod.conf');
      shelljs.exec(`node ${webpack} --config ${webpackProdConfig}`);
    }
  });
tidory.parse(process.argv);